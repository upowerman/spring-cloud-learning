eureka:
    client:
        serviceUrl:
            defaultZone: http://${eureka.host:127.0.0.1}:${eureka.port:8888}/eureka/
    instance:
        prefer-ip-address: true
management:
    endpoints:
        web:
            exposure:
                include: hystrix.stream
feign:
    hystrix:
        enabled: true
ribbon:
    OkToRetryOnAllOperations: true  #对所有操作请求都进行重试,默认false
    ConnectTimeout: 6000  #负载均衡超时时间，默认值5000
    ReadTimeout: 6000  #ribbon请求连接的超时时间，默认值2000
    MaxAutoRetries: 0 #对当前实例的重试次数，默认0
    MaxAutoRetriesNextServer: 0 #对切换实例的重试次数，默认1
hystrix:
    command:
        default:  #default全局有效，service id指定应用有效
            execution:
                timeout:
                    #如果enabled设置为false，则请求超时交给ribbon控制,为true,则超时作为熔断根据
                    enabled: true
                isolation:
                    # 隔离策略  线程池隔离
                    strategy: THREAD
                    thread:
                        timeoutInMilliseconds: 15000  #断路器超时时间，默认1000ms


#    如果hystrix.command.default.execution.timeout.enabled为true,则会有两个执行方法超时的配置,一个就是ribbon的ReadTimeout,一个就是熔断器hystrix的timeoutInMilliseconds, 此时谁的值小谁生效
#    如果hystrix.command.default.execution.timeout.enabled为false,则熔断器不进行超时熔断,而是根据ribbon的ReadTimeout抛出的异常而熔断,也就是取决于ribbon
#    ribbon的ConnectTimeout,配置的是请求服务的超时时间,除非服务找不到,或者网络原因,这个时间才会生效
#    ribbon还有MaxAutoRetries对当前实例的重试次数,MaxAutoRetriesNextServer对切换实例的重试次数, 如果ribbon的ReadTimeout超时,或者ConnectTimeout连接超时,会进行重试操作
#    通常熔断的超时时间需要配置的比ReadTimeout长,ReadTimeout比ConnectTimeout长
